/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.ifba.curso.view;

import br.com.ifba.curso.controller.CursoController;
import br.com.ifba.curso.controller.CursoIController;
import br.com.ifba.curso.entity.Curso;
import java.awt.event.WindowEvent;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author rober
 */
public class CursoListar extends javax.swing.JFrame {

    /**
     * Creates new form CursoListar
     */
    
    /**
     * Modelo da tabela utilizado para exibir os dados dos cursos.
     * Colunas: ID, Nome, Código do Curso e Ativo.
     */
    private DefaultTableModel tabela = new DefaultTableModel(new Object[]{"ID", "Nome", "Código Curso", "Ativo"}, 0);
    
    /**
     * Armazena a linha selecionada na tabela.
     */
    private int linhaSelecionada;
    
    CursoIController cursoController = new CursoController();
    
    /**
     * Construtor padrão da classe. Inicializa os componentes da interface e a tabela.
     */
    public CursoListar() {
        initComponents();
        initTable();
    }
    
     /**
     * Inicializa a tabela preenchendo-a com os dados de todos os cursos armazenados no banco.
     * 
     * Este método recupera todos os cursos usando o método {@code findAll()} de 
     * {@link CursoIDao}, e preenche a tabela com os dados de cada curso. 
     * Após preencher os dados, o modelo da tabela é atualizado para exibir as informações.
     */
    public void initTable () {
        List<Curso> cursos = cursoController.findAll();
        for (Curso curso : cursos) {
            tabela.addRow(new Object[]{curso.getId(), curso.getNome(), curso.getCodigoCurso(), curso.isAtivo()});
        }
        tableCurso.setModel(tabela);
    }
    
    /**
     * Atualiza os dados da tabela, garantindo que as informações exibidas estejam sincronizadas
     * com os dados do banco de dados.
     * 
     * Este método limpa a tabela atual (removendo todas as linhas) e recarrega as informações 
     * de todos os cursos cadastrados no banco de dados, utilizando o método {@code findAll()} 
     * de {@link CursoIDao}.
     * Após atualizar os dados, o modelo da tabela é configurado novamente para refletir 
     * as informações mais recentes.
    */
    public void updateTable () {
        tabela.setRowCount(0);
        List<Curso> cursos = cursoController.findAll();
        for (Curso curso : cursos) {
            tabela.addRow(new Object[]{curso.getId(), curso.getNome(), curso.getCodigoCurso(), curso.isAtivo()});
        }
        tableCurso.setModel(tabela);
    }
    
    /**
    * Atualiza a tabela de cursos com os resultados da busca por nome.
    * 
    * Este método realiza uma busca por cursos com base no nome fornecido. A lista de cursos retornada
    * pelo método {@code cursoDao.findByNome(nome)} é utilizada para atualizar a tabela na interface gráfica.
    *
    * @param nome O nome do curso a ser buscado, utilizado para realizar a pesquisa no banco de dados.
    */
    public void updataTableBySearchNome(String nome) {
        List<Curso> cursos = cursoController.findByNome(nome);
        if (cursos != null) {
            tabela.setRowCount(0);
            for (Curso curso : cursos) {
                tabela.addRow(new Object[]{curso.getId(), curso.getNome(), curso.getCodigoCurso(), curso.isAtivo()});
            }
            tableCurso.setModel(tabela);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelTabelaCurso = new javax.swing.JScrollPane();
        tableCurso = new javax.swing.JTable();
        btnAEditar = new javax.swing.JButton();
        btnRemover = new javax.swing.JButton();
        btnAdicionar = new javax.swing.JButton();
        lblTextoLinhaSelecionada = new javax.swing.JLabel();
        lblLinhaSelecionada = new javax.swing.JLabel();
        txtProcurar = new javax.swing.JTextField();
        lblTextoBuscarCurso = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(255, 255, 255));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tableCurso.setModel(tabela);
        tableCurso.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableCursoMouseClicked(evt);
            }
        });
        panelTabelaCurso.setViewportView(tableCurso);

        btnAEditar.setText("Edite");
        btnAEditar.setToolTipText("");
        btnAEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAEditarActionPerformed(evt);
            }
        });

        btnRemover.setText("Remover");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });

        btnAdicionar.setText("Adicionar");
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });

        lblTextoLinhaSelecionada.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblTextoLinhaSelecionada.setText("Linha Selecionada :");

        lblLinhaSelecionada.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblLinhaSelecionada.setText("0");

        txtProcurar.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtProcurar.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtProcurar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtProcurarKeyPressed(evt);
            }
        });

        lblTextoBuscarCurso.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblTextoBuscarCurso.setText("Informe o Nome do Curso");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTextoBuscarCurso)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtProcurar, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblTextoLinhaSelecionada)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblLinhaSelecionada, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelTabelaCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 632, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAdicionar)
                            .addComponent(btnRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTextoLinhaSelecionada)
                            .addComponent(lblLinhaSelecionada)
                            .addComponent(lblTextoBuscarCurso)
                            .addComponent(txtProcurar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45)
                        .addComponent(btnAdicionar)
                        .addGap(51, 51, 51)
                        .addComponent(btnRemover)
                        .addGap(45, 45, 45)
                        .addComponent(btnAEditar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(panelTabelaCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
    * Método chamado ao clicar no botão "Remover" para excluir um curso selecionado.
    * 
    * Este método verifica se uma linha da tabela foi selecionada. Caso contrário, exibe uma mensagem de alerta.
    * Se uma linha for selecionada, o usuário é solicitado a confirmar a exclusão do curso. Se a resposta for 
    * afirmativa, os dados do curso selecionado são recuperados da tabela, um objeto {@link Curso} é criado com 
    * essas informações, e o curso é removido do banco de dados utilizando o método {@code delete()} de {@code cursoDao}.
    * Após a exclusão, uma mensagem de sucesso é exibida, e a tabela é atualizada para refletir a remoção.
    * Caso o usuário cancele a operação, uma mensagem de cancelamento é mostrada.
    * 
    * @param evt o evento acionado pelo clique no botão "Remover".
    */
    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
        // TODO add your handling code here:
        if (linhaSelecionada >= 0) {
            int resposta = JOptionPane.showConfirmDialog(
            null, "Tem certeza que deseja excluir ?",
            "Alerta", JOptionPane.WARNING_MESSAGE);
            
            if (resposta == JOptionPane.YES_OPTION) {
                Curso curso = new Curso();
                curso.setId((long) tabela.getValueAt(linhaSelecionada, 0));
                curso.setNome((String) tabela.getValueAt(linhaSelecionada, 1));
                curso.setCodigoCurso((String) tabela.getValueAt(linhaSelecionada, 2));
                curso.setAtivo((boolean) tabela.getValueAt(linhaSelecionada, 3));
                
                cursoController.delete(curso);
                
                JOptionPane.showMessageDialog(
                null, "Curso Excluido!",
                "Notificação", JOptionPane.INFORMATION_MESSAGE);
                this.updateTable();
            } else {
                JOptionPane.showMessageDialog(
                null, "Operação Cancelada",
                "Notificação", JOptionPane.INFORMATION_MESSAGE);
            }
            
        } else {
            JOptionPane.showMessageDialog(
            null, "Nenhum Curso foi selecionado!",
            "Alerta", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnRemoverActionPerformed

    /**
    * Evento acionado quando o botão 'Adicionar' é clicado.
    * Este método cria uma nova instância da janela 'CursoCadastro' e a torna visível,
    * permitindo ao usuário adicionar um novo curso.
    *
    * @param evt O evento que representa o clique no botão.
    */
    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        CursoCadastro adicionarCurso = new CursoCadastro(this);
        adicionarCurso.setVisible(true);
    }//GEN-LAST:event_btnAdicionarActionPerformed

    /**
    * Método chamado quando o usuário clica em uma linha da tabela
    * 
    * Este método captura o índice da linha selecionada na tabela e armazena no atributo {@code linhaSelecionada}.
    * Além disso, atualiza o rótulo {@link lblLinhaSelecionada} para exibir o número da linha selecionada (começando de 1).
    * 
    * @param evt o evento acionado pelo clique do usuário na tabela.
    */
    private void tableCursoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableCursoMouseClicked
        linhaSelecionada = tableCurso.getSelectedRow();
        lblLinhaSelecionada.setText(Integer.toString(linhaSelecionada + 1));
    }//GEN-LAST:event_tableCursoMouseClicked

    /**
    * Método acionado ao clicar no botão de editar.
    * 
    * Este método verifica se uma linha da tabela foi selecionada. Caso contrário, exibe uma mensagem de alerta.
    * Se uma linha for selecionada, o método recupera o ID do curso a partir da linha selecionada na tabela, 
    * e abre a janela de edição de curso ( {@link CursoEditar} ), passando o ID do curso para que o curso 
    * correto seja carregado para edição.
    * 
    * Se nenhum curso for selecionado, uma mensagem de alerta é exibida ao usuário.
    * 
    * @param evt o evento acionado pelo clique no botão "Editar".
    */
    private void btnAEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAEditarActionPerformed
        if (linhaSelecionada >= 0) {
            long idItem = (long) tabela.getValueAt(linhaSelecionada, 0);
            CursoEditar editarCurso = new CursoEditar(this, idItem);
            editarCurso.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(
                null, "Nenhum Curso foi selecionado para edição!",
                "Alerta", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnAEditarActionPerformed

    /**
    * Evento disparado quando uma tecla é pressionada no campo de busca para filtrar cursos por nome.
    * 
    * Este método é acionado sempre que uma tecla é pressionada no campo de texto {@code txtProcurar}.
    * Ele verifica o texto inserido e, se o campo não estiver vazio, realiza uma busca por cursos cujo nome
    * corresponda ao texto digitado, atualizando a tabela com os resultados.
    *
    * @param evt O evento de pressionamento de tecla, que contém as informações da tecla pressionada.
    */
    private void txtProcurarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtProcurarKeyPressed
        String nome = txtProcurar.getText();
        if (!nome.equals("")) {
            updataTableBySearchNome(nome);
        } else {
            updateTable();
        }
    }//GEN-LAST:event_txtProcurarKeyPressed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CursoListar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CursoListar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CursoListar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CursoListar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CursoListar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAEditar;
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnRemover;
    private javax.swing.JLabel lblLinhaSelecionada;
    private javax.swing.JLabel lblTextoBuscarCurso;
    private javax.swing.JLabel lblTextoLinhaSelecionada;
    private javax.swing.JScrollPane panelTabelaCurso;
    private javax.swing.JTable tableCurso;
    private javax.swing.JTextField txtProcurar;
    // End of variables declaration//GEN-END:variables
}
